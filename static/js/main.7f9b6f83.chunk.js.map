{"version":3,"sources":["components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","children","react_default","a","createElement","className","join","Loading","TopPage","Loadable","loader","__webpack_require__","e","then","bind","loading","ComputerScience","DataScience","Mathematics","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","page","print","_this2","window","onbeforeprint","setState","onafterprint","nextProps","console","log","process","BrowserRouter","href","Switch","Route","path","concat","component","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gTAEeA,EAAA,SAAAC,GAAqB,IAAXC,EAAWD,EAAXC,SACvB,OACEC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEhBH,EAAAC,EAAAC,cAAA,KAAGC,UAAW,CAAC,YAAY,kBAAkBC,KAAK,MAAOL,KCAzDM,EAAU,kBAAML,EAAAC,EAAAC,cAAA,0BAEhBI,EAAUC,IAAS,CACvBC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WACdC,QAASR,IAELS,EAAkBP,IAAS,CAC/BC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WACdC,QAASR,IAELU,EAAcR,IAAS,CAC3BC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WACdC,QAASR,IAELW,EAAcT,IAAS,CAC3BC,OAAQ,kBAAMC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WACdC,QAASR,IAmDIY,cA/Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,EACNC,OAAO,GAJQT,mFAQE,IAAAU,EAAAP,KACnBQ,OAAOC,cAAgB,WACrBF,EAAKG,SAAS,CACZJ,OAAO,KAGXE,OAAOG,aAAe,WACpBJ,EAAKG,SAAS,CACZJ,OAAO,uGAQaM,qCAKxB,OADAC,QAAQC,IAAIC,KAEVrC,EAAAC,EAAAC,cAACoC,EAAA,EAAD,KACEtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACL,EAAD,KAAQG,EAAAC,EAAAC,cAAA,KAAGqC,KAAK,MAAR,qFAEVvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,KACExC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOC,KAAI,GAAAC,OAAKN,IAAL,qBAAgDO,UAAW9B,IACtEd,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOC,KAAI,GAAAC,OAAKN,IAAL,iBAA4CO,UAAW7B,IAClEf,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOC,KAAI,GAAAC,OAAKN,IAAL,gBAA2CO,UAAW5B,IACjEhB,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAOC,KAAI,GAAAC,OAAKN,IAAL,KAAgCO,UAAWtC,cAxChDuC,aCbEC,QACW,cAA7BhB,OAAOiB,SAASC,UAEe,UAA7BlB,OAAOiB,SAASC,UAEhBlB,OAAOiB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,KAAK,SAAA+C,GACjCA,EAAaC","file":"static/js/main.7f9b6f83.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default function({children}) {\n  return (\n    <header className=\"App-header\">\n      {/* <button className=\"App-header-button\" onClick={this.goPrev}>前のページ</button> */}\n      <p className={[\"App-title\",\"App-header-col\"].join(' ')}>{children}</p>\n      {/* <button className=\"App-header-button\" onClick={this.goNext}>次のページ</button> */}\n    </header>\n  )\n}\n","import React, { Component } from 'react';\nimport Loadable from 'react-loadable';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Header from './components/Header';\n\nconst Loading = () => <div>Loading...</div>;\n\nconst TopPage = Loadable({\n  loader: () => import('./containers/TopPage'),\n  loading: Loading,\n});\nconst ComputerScience = Loadable({\n  loader: () => import('./containers/ComputerScience'),\n  loading: Loading,\n});\nconst DataScience = Loadable({\n  loader: () => import('./containers/DataScience'),\n  loading: Loading,\n});\nconst Mathematics = Loadable({\n  loader: () => import('./containers/Mathematics'),\n  loading: Loading,\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: 0,\n      print: false,\n    }\n  }\n\n  componentDidMount () {\n    window.onbeforeprint = () => {\n      this.setState({\n        print: true,\n      })\n    }\n    window.onafterprint = () => {\n      this.setState({\n        print: false,\n      })\n    }\n  }\n\n  componentWillUnmount() {\n  }\n\n  componentWillReceiveProps(nextProps) {\n  }\n\n  render() {\n    console.log(process.env.PUBLIC_URL);\n    return (\n      <Router>\n        <div>\n          <div className=\"App\">\n            <Header><a href=\"./\">データアントプレナー 虎の巻</a></Header>\n          </div>\n          <Switch>\n            <Route path={`${process.env.PUBLIC_URL}/computer-science`} component={ComputerScience} />\n            <Route path={`${process.env.PUBLIC_URL}/data-science`} component={DataScience} />\n            <Route path={`${process.env.PUBLIC_URL}/mathematics`} component={Mathematics} />\n            <Route path={`${process.env.PUBLIC_URL}/`} component={TopPage} />\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}